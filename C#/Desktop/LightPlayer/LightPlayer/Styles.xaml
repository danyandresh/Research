<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:LightPlayer="clr-namespace:LightPlayer" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic" xmlns:System="clr-namespace:System;assembly=mscorlib">
	<Style x:Name="hyperlinks" TargetType="{x:Type Hyperlink}" >
		<Setter Property="Background" Value="{DynamicResource ButtonBackgroundActiveBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundActiveBrush}" />
		<Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
		<Setter Property="FontSize" Value="{DynamicResource FontSize}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource ButtonBackgroundHoverBrush}"/>
				<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundHoverBrush}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="False">
				<Setter Property="Background" Value="{DynamicResource ButtonBackgroundActiveBrush}"/>
				<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundActiveBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Color x:Key="ButtonBackgroundActive">#FFDFFFFD</Color>
	<Color x:Key="ButtonForegroundActive">#FF006C66</Color>
	<Color x:Key="ButtonBackgroundHover">#FF8CCFCC</Color>
	<Color x:Key="ButtonForegroundHover">#FF00504C</Color>
	<Color x:Key="ButtonBackgroundPressed">#FF3CF3EA</Color>
	<Color x:Key="ButtonForegroundPressed">#FF004C49</Color>
	<Color x:Key="ButtonBackgroundInactive">#19D2FFFD</Color>
	<Color x:Key="ButtonForegroundInactive">#FF004C49</Color>
    
	<SolidColorBrush x:Key="ButtonBackgroundActiveBrush" Color="{DynamicResource ButtonBackgroundActive}"/>
	<SolidColorBrush x:Key="ButtonForegroundActiveBrush" Color="{DynamicResource ButtonForegroundActive}"/>
	<SolidColorBrush x:Key="ButtonBackgroundHoverBrush" Color="{DynamicResource ButtonBackgroundHover}"/>
	<SolidColorBrush x:Key="ButtonForegroundHoverBrush" Color="{DynamicResource ButtonForegroundHover}"/>
	<SolidColorBrush x:Key="ButtonBackgroundPressedBrush" Color="{DynamicResource ButtonBackgroundPressed}"/>
	<SolidColorBrush x:Key="ButtonForegroundPressedBrush" Color="{DynamicResource ButtonForegroundPressed}"/>
	<SolidColorBrush x:Key="ButtonBackgroundInactiveBrush" Color="{DynamicResource ButtonBackgroundInactive}"/>
	<SolidColorBrush x:Key="ButtonForegroundInactiveBrush" Color="{DynamicResource ButtonForegroundInactive}"/>
	
	<ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
		<Border CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}">
			<Grid>
				<ContentPresenter/>
			</Grid>
		</Border>

		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource ButtonBackgroundHoverBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundHoverBrush}" />				
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressedBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundPressedBrush}" />
				
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="MediaButtonTemplate" TargetType="{x:Type LightPlayer:MediaButton}">
		<Border CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}">
			<Grid>
				<Path x:Name="PathIcon" Style="{DynamicResource ButtonShapeStyle}" Data="{Binding Shape, RelativeSource={RelativeSource TemplatedParent}}"/>
			</Grid>
		</Border>

		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource ButtonBackgroundHoverBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundHoverBrush}" />
				<Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ButtonForegroundHoverBrush}" />
			</Trigger>

			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressedBrush}" />
				<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundPressedBrush}" />
				<Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ButtonForegroundHoverBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Thickness x:Key="ButtonShapeMargin">5,5,5,5</Thickness>

	<System:Double x:Key="FontSize">15</System:Double>

	<Style TargetType="{x:Type Button}">
		<Setter Property="Margin" Value="{DynamicResource ButtonMargin}"/>
		<Setter Property="Background" Value="{DynamicResource ButtonBackgroundActiveBrush}" />
		<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundActiveBrush}" />
		<Setter Property="FontSize" Value="{DynamicResource FontSize}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="MinWidth" Value="40"/>
		<Setter Property="MinHeight" Value="40"/>
		<Setter Property="BorderThickness" Value="{DynamicResource ButtonShapeMargin}"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border CornerRadius="4" Background="{TemplateBinding Background}" MinWidth="30" MinHeight="30">
						<Grid>
							<Path x:Name="PathIcon" Style="{DynamicResource ButtonShapeStyle}"/>
							<ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" Style="{DynamicResource ButtonContentStyle}" />
						</Grid>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource ButtonBackgroundHoverBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundHoverBrush}" />
							<Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ButtonForegroundHoverBrush}" />
						</Trigger>

						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressedBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundHoverBrush}" />
							<Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ButtonForegroundHoverBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="ButtonPlay" TargetType="{x:Type LightPlayer:MediaButton}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Shape" Value="M0,0 L0,2 L1,1 L0,0" />
		<Setter Property="Template" Value="{DynamicResource MediaButtonTemplate}"/>
	</Style>
	<Style x:Key="ButtonPause" TargetType="{x:Type LightPlayer:MediaButton}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Shape" Value="M0,0 L0,2 L1,2 L1,0 M2,0 L2,2 L3,2 L3,0" />
		<Setter Property="Template" Value="{DynamicResource MediaButtonTemplate}"/>
	</Style>
	<Style x:Key="ButtonStop" TargetType="{x:Type LightPlayer:MediaButton}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Shape" Value="M0,0 L0,2 L1,2 L1,0" />
		<Setter Property="Template" Value="{DynamicResource MediaButtonTemplate}"/>
	</Style>
	<Style x:Key="ButtonShapeStyle" TargetType="{x:Type Path}">
		<Setter Property="Width" Value="25"/>
		<Setter Property="Height" Value="25"/>
		<Setter Property="MinWidth" Value="25"/>
		<Setter Property="MinHeight" Value="25"/>
		<Setter Property="Stretch" Value="Fill"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Margin" Value="{DynamicResource ButtonShapeMargin}"/>
		<Setter Property="Fill" Value="{DynamicResource ButtonForegroundActiveBrush}"/>
	</Style>
	<Style x:Key="ButtonContentStyle" TargetType="{x:Type ContentPresenter}">
		<Setter Property="Width" Value="25"/>
		<Setter Property="Height" Value="25"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Margin" Value="{DynamicResource ButtonShapeMargin}"/>
	</Style>
	<Thickness x:Key="ButtonMargin">5</Thickness>
	<Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
		<Setter Property="Background" Value="{DynamicResource ButtonBackgroundActiveBrush}"/>
		<Setter Property="Foreground" Value="{DynamicResource ButtonForegroundActiveBrush}"/>		
		<Setter Property="BorderThickness" Value="{DynamicResource ButtonShapeMargin}"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Margin" Value="{DynamicResource ButtonMargin}"/>
		<Setter Property="FontSize" Value="{DynamicResource FontSize}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<Themes:ClassicBorderDecorator x:Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<ScrollViewer Focusable="false">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource ItemsPresenterStyle}"/>
						</ScrollViewer>
					</Themes:ClassicBorderDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource ButtonBackgroundInactiveBrush}"/>							
						</Trigger>
						<Trigger Property="IsEnabled" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource ButtonBackgroundActiveBrush}"/>
						</Trigger>												
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true"/>
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ItemsPresenterStyle" TargetType="{x:Type ItemsPresenter}">
		<Setter Property="Margin" Value="{DynamicResource ButtonMargin}"/>
	</Style>
</ResourceDictionary>